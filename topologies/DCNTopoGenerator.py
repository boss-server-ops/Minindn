import argparse
import os

def generate_dcn_conf(agg_num, pro_per_agg, bw, loss, mode='full'):
    """生成DCN拓扑配置文件（支持full/primary两种模式）"""
    nodes = ["con0:_"]
    links = []
    
    # 生成Aggregator节点
    for i in range(agg_num):
        nodes.append(f"agg{i}:_")
    
    # 生成Producer节点（每组pro_per_agg个）
    total_pro = agg_num * pro_per_agg
    for i in range(total_pro):
        nodes.append(f"pro{i}:_")
    
    # Consumer → Aggregators（通用部分）
    for agg_id in range(agg_num):
        links.append(f"con0:agg{agg_id} bw={bw} delay=0.07 loss={loss}")

    # 根据模式生成不同连接
    if mode == 'full':
        # Aggregator横向全互联（核心修改点）
        for i in range(agg_num):
            for j in range(i+1, agg_num):
                links.append(f"agg{i}:agg{j} bw={bw*5} delay=0.02 loss={loss/2}")  # 提升agg间带宽

    # 所有模式都保持的Producer连接逻辑（关键修改）
    for agg_id in range(agg_num):
        start = agg_id * pro_per_agg
        end = start + pro_per_agg
        for pro_id in range(start, end):
            links.append(f"agg{agg_id}:pro{pro_id} bw={bw} delay=0.008 loss={loss}")

    return f"""[nodes]
{"\n".join(nodes)}
[links]
{"\n".join(links)}
# Generated by DCN Generator ({mode} mode)"""

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="DCN拓扑生成器（新逻辑）")
    parser.add_argument("-a", "--agg-num", type=int, required=True, help="Aggregator数量（≥2）")
    parser.add_argument("-p", "--pro-per-agg", type=int, required=True, help="每个Agg的Producer数量（≥1）")
    parser.add_argument("-b", "--bw", type=int, default=30, help="链路带宽")
    parser.add_argument("-l", "--loss", type=float, default=0.0, help="链路丢包率")
    
    args = parser.parse_args()

    # 参数校验（保持不变）
    if args.agg_num < 2:
        print("错误：需要至少2个Aggregator")
        exit(1)
    if args.pro_per_agg < 1:
        print("错误：每组至少1个Producer")
        exit(1)
    if args.loss < 0 or args.loss > 1:
        print("错误：丢包率需在0-1之间")
        exit(1)

    # 生成两种配置文件
    for mode in ['full', 'primary']:
        conf_content = generate_dcn_conf(
            args.agg_num,
            args.pro_per_agg,
            args.bw,
            args.loss,
            mode
        )
        
        filename = f"dcn_{mode}_a{args.agg_num}_p{args.pro_per_agg}_b{args.bw}_l{args.loss}.conf"
        with open(filename, 'w') as f:
            f.write(conf_content)
        print(f"已生成：{filename}")
    
    print("\n使用示例：")
    print("1. 测试完整拓扑：python dcn_test.py dcn_full_a2_p3.conf")
    print("2. 测试基础拓扑：python dcn_test.py dcn_primary_a2_p3.conf")