import argparse
import os

def generate_ring_conf(agg_num, pro_per_agg, bw, loss, mode='full'):
    """生成环形DCN拓扑（Aggregator环形连接）"""
    nodes = ["con0:_"]
    links = []
    
    # 生成Aggregator节点
    for i in range(agg_num):
        nodes.append(f"agg{i}:_")
    
    # 生成Producer节点
    total_pro = agg_num * pro_per_agg
    for i in range(total_pro):
        nodes.append(f"pro{i}:_")
    
    # Consumer连接所有Aggregator
    for agg_id in range(agg_num):
        links.append(f"con0:agg{agg_id} bw={bw} delay=0.07 loss={loss}")

    # 环形连接逻辑（核心修改）
    if mode == 'full':
        for i in range(agg_num):
            next_agg = (i + 1) % agg_num  # 环形计算下一个节点
            links.append(f"agg{i}:agg{next_agg} bw={bw*2} delay=0.02 loss={loss/2}")
            # 反向链路（可选）
            # links.append(f"agg{next_agg}:agg{i} bw={bw*2} delay=0 loss={loss/2}")

    # 固定连接本组Producer
    for agg_id in range(agg_num):
        start = agg_id * pro_per_agg
        end = start + pro_per_agg
        for pro_id in range(start, end):
            links.append(f"agg{agg_id}:pro{pro_id} bw={bw} delay=0.008 loss={loss}")

    return f"""[nodes]
{"\n".join(nodes)}
[links]
{"\n".join(links)}
# Generated by RingDCN Generator ({mode} mode)"""

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="环形DCN拓扑生成器")
    parser.add_argument("-a", "--agg-num", type=int, required=True, help="Aggregator数量（≥3）")
    parser.add_argument("-p", "--pro-per-agg", type=int, required=True, help="每个Agg的Producer数量（≥1）")
    parser.add_argument("-b", "--bw", type=int, default=30, help="链路带宽")
    parser.add_argument("-l", "--loss", type=float, default=0.0, help="链路丢包率")
    
    args = parser.parse_args()

    # 参数校验（环形至少3节点）
    if args.agg_num < 3:
        print("错误：环形拓扑需要至少3个Aggregator")
        exit(1)
    if args.pro_per_agg < 1:
        print("错误：每组至少1个Producer")
        exit(1)
    if args.loss < 0 or args.loss > 1:
        print("错误：丢包率需在0-1之间")
        exit(1)

    # 生成两种配置文件
    for mode in ['full', 'primary']:
        conf_content = generate_ring_conf(
            args.agg_num,
            args.pro_per_agg,
            args.bw,
            args.loss,
            mode
        )
        
        filename = f"ring_{mode}_a{args.agg_num}_p{args.pro_per_agg}_b{args.bw}_l{args.loss}.conf"
        with open(filename, 'w') as f:
            f.write(conf_content)
        print(f"已生成：{filename}")
    
    print("\n使用示例：")
    print("1. 测试环形拓扑：python dcn_test.py ring_full_a3_p2.conf")

# 生成测试脚本（需另存为ring_test.py）